package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"
	"fmt"
	"outstagram/common"
	"outstagram/graph/model"

	"github.com/vektah/gqlparser/v2/gqlerror"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.User, error) {
	panic(fmt.Errorf("not implemented: CreateTodo - createTodo"))
}

// User is the resolver for the user field.
func (r *postResolver) User(ctx context.Context, obj *model.Post) (*model.User, error) {
	var userRecord *model.User
	if err := r.userService.UserGetByID(obj.UserID, &userRecord); err != nil {
		return nil, gqlerror.Errorf(err.Error())
	}

	return userRecord, nil
}

// PostFiles is the resolver for the post_files field.
func (r *postResolver) PostFiles(ctx context.Context, obj *model.Post) ([]*model.PostFile, error) {
	var postFileRecords []*model.PostFile
	if err := r.postFileService.PostFileGetAllByPostID(obj.ID, &postFileRecords); err != nil {
		return nil, gqlerror.Errorf(err.Error())
	}

	return postFileRecords, nil
}

// PostLikes is the resolver for the post_likes field.
func (r *postResolver) PostLikes(ctx context.Context, obj *model.Post) ([]*model.PostLike, error) {
	panic(fmt.Errorf("not implemented: PostLikes - post_likes"))
}

// PostComments is the resolver for the post_comments field.
func (r *postResolver) PostComments(ctx context.Context, obj *model.Post) ([]*model.PostComment, error) {
	panic(fmt.Errorf("not implemented: PostComments - post_comments"))
}

// UserByUsername is the resolver for the userByUsername field.
func (r *queryResolver) UserByUsername(ctx context.Context, username string) (*model.User, error) {
	var userRecord *model.User
	if err := r.userService.UserGetByUserName(username, &userRecord); err != nil {
		return nil, gqlerror.Errorf(err.Error())
	}

	if userRecord.ID == nil {
		return nil, gqlerror.Errorf("user not found")
	}

	return userRecord, nil
}

// UserSearch is the resolver for the userSearch field.
func (r *queryResolver) UserSearch(ctx context.Context, keyword string) ([]*model.UserSearch, error) {
	if keyword == "" {
		return nil, nil
	}

	var userSearchRecords []*model.UserSearch
	if err := r.userService.UserSearchByUsernameOrFullName(keyword, &userSearchRecords); err != nil {
		return nil, err
	}

	return userSearchRecords, nil
}

// UserSuggestion the resolver for the userSuggestion field.
func (r *queryResolver) UserSuggestion(ctx context.Context, count int) ([]*model.UserSuggestion, error) {
	currentUserID, isOk := ctx.Value(common.UserIDLocalKey).(string)

	if !isOk {
		return nil, gqlerror.Errorf("user not found")
	}

	var userSuggestions []*model.UserSuggestion
	if err := r.userService.UserSuggestion(currentUserID, count, &userSuggestions); err != nil {
		return nil, err
	}

	return userSuggestions, nil
}

// PostByUsername is the resolver for the postByUsername field.
func (r *queryResolver) PostByUsername(ctx context.Context, username string) ([]*model.Post, error) {
	var posts []*model.Post
	if err := r.postService.PostGetAllByUserName(username, &posts); err != nil {
		return nil, gqlerror.Errorf(err.Error())
	}

	return posts, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Post returns PostResolver implementation.
func (r *Resolver) Post() PostResolver { return &postResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type postResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
